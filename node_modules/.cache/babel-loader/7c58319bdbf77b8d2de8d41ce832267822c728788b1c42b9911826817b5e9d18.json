{"ast":null,"code":"import { PAYMENT_CONFIG } from '../config/payments';\nimport { loadStripe } from '@stripe/stripe-js';\nclass PaymentService {\n  constructor() {\n    this.stripe = null;\n    this.initializeStripe();\n  }\n  async initializeStripe() {\n    try {\n      this.stripe = await loadStripe(PAYMENT_CONFIG.stripe.publicKey);\n    } catch (error) {\n      console.error('Error initializing Stripe:', error);\n    }\n  }\n\n  // Credit Card Payment\n  async processCreditCardPayment(amount, currency, paymentMethod) {\n    try {\n      const {\n        error,\n        paymentIntent\n      } = await this.stripe.confirmCardPayment(paymentMethod.id, {\n        payment_method: paymentMethod.id,\n        amount: amount * 100,\n        // Convert to cents\n        currency: currency || PAYMENT_CONFIG.stripe.currency\n      });\n      if (error) {\n        throw new Error(error.message);\n      }\n      return {\n        success: true,\n        paymentIntent\n      };\n    } catch (error) {\n      console.error('Credit card payment error:', error);\n      throw error;\n    }\n  }\n\n  // MTN Mobile Money Payment\n  async processMTNPayment(amount, phoneNumber) {\n    try {\n      const response = await fetch('https://api.mtn.com/collection/v1/requesttopay', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${PAYMENT_CONFIG.mobileMoney.mtn.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount: amount.toString(),\n          currency: 'UGX',\n          externalId: `mtn-${Date.now()}`,\n          payer: {\n            partyIdType: 'MSISDN',\n            partyId: phoneNumber\n          },\n          payerMessage: 'Payment for Airbnb booking',\n          payeeNote: 'Thank you for your booking'\n        })\n      });\n      const data = await response.json();\n      return {\n        success: true,\n        transactionId: data.transactionId\n      };\n    } catch (error) {\n      console.error('MTN payment error:', error);\n      throw error;\n    }\n  }\n\n  // Airtel Money Payment\n  async processAirtelPayment(amount, phoneNumber) {\n    try {\n      const response = await fetch('https://api.airtel.com/collection/v1/requesttopay', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${PAYMENT_CONFIG.mobileMoney.airtel.apiKey}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          amount: amount.toString(),\n          currency: 'UGX',\n          externalId: `airtel-${Date.now()}`,\n          payer: {\n            partyIdType: 'MSISDN',\n            partyId: phoneNumber\n          },\n          payerMessage: 'Payment for Airbnb booking',\n          payeeNote: 'Thank you for your booking'\n        })\n      });\n      const data = await response.json();\n      return {\n        success: true,\n        transactionId: data.transactionId\n      };\n    } catch (error) {\n      console.error('Airtel payment error:', error);\n      throw error;\n    }\n  }\n\n  // Get available payment methods\n  getAvailablePaymentMethods() {\n    return Object.entries(PAYMENT_CONFIG.methods).filter(([_, method]) => method.enabled).map(([key, method]) => ({\n      id: key,\n      ...method\n    }));\n  }\n}\nexport const paymentService = new PaymentService();","map":{"version":3,"names":["PAYMENT_CONFIG","loadStripe","PaymentService","constructor","stripe","initializeStripe","publicKey","error","console","processCreditCardPayment","amount","currency","paymentMethod","paymentIntent","confirmCardPayment","id","payment_method","Error","message","success","processMTNPayment","phoneNumber","response","fetch","method","headers","mobileMoney","mtn","apiKey","body","JSON","stringify","toString","externalId","Date","now","payer","partyIdType","partyId","payerMessage","payeeNote","data","json","transactionId","processAirtelPayment","airtel","getAvailablePaymentMethods","Object","entries","methods","filter","_","enabled","map","key","paymentService"],"sources":["C:/Users/david/OneDrive/Desktop/ReactJs/react/Airbnb/src/services/PaymentService.js"],"sourcesContent":["import { PAYMENT_CONFIG } from '../config/payments';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\n\r\nclass PaymentService {\r\n  constructor() {\r\n    this.stripe = null;\r\n    this.initializeStripe();\r\n  }\r\n\r\n  async initializeStripe() {\r\n    try {\r\n      this.stripe = await loadStripe(PAYMENT_CONFIG.stripe.publicKey);\r\n    } catch (error) {\r\n      console.error('Error initializing Stripe:', error);\r\n    }\r\n  }\r\n\r\n  // Credit Card Payment\r\n  async processCreditCardPayment(amount, currency, paymentMethod) {\r\n    try {\r\n      const { error, paymentIntent } = await this.stripe.confirmCardPayment(\r\n        paymentMethod.id,\r\n        {\r\n          payment_method: paymentMethod.id,\r\n          amount: amount * 100, // Convert to cents\r\n          currency: currency || PAYMENT_CONFIG.stripe.currency,\r\n        }\r\n      );\r\n\r\n      if (error) {\r\n        throw new Error(error.message);\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        paymentIntent,\r\n      };\r\n    } catch (error) {\r\n      console.error('Credit card payment error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // MTN Mobile Money Payment\r\n  async processMTNPayment(amount, phoneNumber) {\r\n    try {\r\n      const response = await fetch('https://api.mtn.com/collection/v1/requesttopay', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${PAYMENT_CONFIG.mobileMoney.mtn.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          amount: amount.toString(),\r\n          currency: 'UGX',\r\n          externalId: `mtn-${Date.now()}`,\r\n          payer: {\r\n            partyIdType: 'MSISDN',\r\n            partyId: phoneNumber,\r\n          },\r\n          payerMessage: 'Payment for Airbnb booking',\r\n          payeeNote: 'Thank you for your booking',\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      return {\r\n        success: true,\r\n        transactionId: data.transactionId,\r\n      };\r\n    } catch (error) {\r\n      console.error('MTN payment error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Airtel Money Payment\r\n  async processAirtelPayment(amount, phoneNumber) {\r\n    try {\r\n      const response = await fetch('https://api.airtel.com/collection/v1/requesttopay', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${PAYMENT_CONFIG.mobileMoney.airtel.apiKey}`,\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          amount: amount.toString(),\r\n          currency: 'UGX',\r\n          externalId: `airtel-${Date.now()}`,\r\n          payer: {\r\n            partyIdType: 'MSISDN',\r\n            partyId: phoneNumber,\r\n          },\r\n          payerMessage: 'Payment for Airbnb booking',\r\n          payeeNote: 'Thank you for your booking',\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      return {\r\n        success: true,\r\n        transactionId: data.transactionId,\r\n      };\r\n    } catch (error) {\r\n      console.error('Airtel payment error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get available payment methods\r\n  getAvailablePaymentMethods() {\r\n    return Object.entries(PAYMENT_CONFIG.methods)\r\n      .filter(([_, method]) => method.enabled)\r\n      .map(([key, method]) => ({\r\n        id: key,\r\n        ...method,\r\n      }));\r\n  }\r\n}\r\n\r\nexport const paymentService = new PaymentService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}